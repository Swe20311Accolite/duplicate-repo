pipeline {
    agent any
    stages {
        stage('deploy') {
            steps {
                //sh 'kubectl --kubeconfig $MY_CONFIG get pods'
                sh 'echo "ss" '
            }
        }
        stage('write config file'){
            steps{
            withCredentials([string(credentialsId: 'CA_SECRET', variable: 'CA_SECRET'),string(credentialsId: 'CA_SECRET_1', variable: 'CA_SECRET_1'),string(credentialsId: 'CA_SECRET_2', variable: 'CA_SECRET_2')]) {
            
                writeFile file: 'config.yaml', text: '''apiVersion: v1
clusters:
- cluster:
    certificate-authority: ${CA_SECRET}
    extensions:
    - extension:
        last-update: Thu, 12 Aug 2021 14:06:39 IST
        provider: minikube.sigs.k8s.io
        version: v1.20.0
      name: cluster_info
    server: https://192.168.49.2:8443
  name: minikube
contexts:
- context:
    cluster: minikube
    extensions:
    - extension:
        last-update: Thu, 12 Aug 2021 14:06:39 IST
        provider: minikube.sigs.k8s.io
        version: v1.20.0
      name: context_info
    namespace: default
    user: minikube
  name: minikube
current-context: minikube
kind: Config
preferences: {}
users:
- name: minikube'''
            }
            }
        }
        stage('test') {
            steps{
                script {
                    def props = readProperties file: 'version.properties'
                    env.version = props.version
                }
            }
        }
        stage('testing'){
            steps {
                sh '''
                export KUBECONFIG=config
                kubectl get pods
                '''
                sh 'echo ${version}'
            }
        }
        
    }
}
